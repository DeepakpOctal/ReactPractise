{"version":3,"sources":["App.js","components/Header.js","components/Footer.js","components/ReactWC.js","serviceWorker.js","index.js"],"names":["App","className","Header","pahar","timeOfDay","date","Date","hour","getHours","min","getMinutes","sec","getSeconds","day","getDay","console","log","Footer","ReactWC","setRef","webcam","capture","getScreenshot","audio","height","ref","this","screenshotFormat","width","videoConstraints","facingMode","onClick","React","Component","Boolean","window","location","hostname","match","Include","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gNAWeA,MARf,WACE,OACE,yBAAKC,UAAU,SCgCJC,MAnCf,WAEI,IAOIC,EACAC,EAREC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,WACZC,EAAMJ,EAAKK,aACXC,EAAMN,EAAKO,aAEXC,EAAMR,EAAKS,SAqBjB,OApBAC,QAAQC,IAAIP,EAAKE,EAAKJ,GAIlBA,GAAQ,IAAMA,EAAO,IACvBH,EAAY,YACZD,EAAQ,MAEDI,GAAQ,IAAMA,EAAO,IAC1BH,EAAY,UACZD,EAAQ,MAEHI,EAAO,IACdH,EAAY,UACZD,EAAQ,OAGRC,EAAY,QACZD,EAAQ,MAGR,wCAAcC,EAAd,cAvBY,CAAC,SAAS,SAAS,UAAU,aAAa,WAAW,SAAS,YAuB9BS,GAA5C,2BAA0EN,EAA1E,MAAmFE,EAAnF,MAA2FE,EAA3F,IAAiGR,EAAjG,uBClBSc,MAXf,WAEI,OAEI,iEAAsC,6BAAtC,mE,4CCgCOC,E,4MAlCXC,OAAS,SAAAC,GACP,EAAKA,OAASA,G,EAGhBC,QAAU,WACS,EAAKD,OAAOE,iB,uDAU7B,OACE,6BACE,kBAAC,IAAD,CACEC,OAAO,EACPC,OAAQ,IACRC,IAAKC,KAAKP,OACVQ,iBAAiB,aACjBC,MAAO,IACPC,iBAdmB,CACvBD,MAAO,KACPJ,OAAQ,IACRM,WAAY,UAaV,4BAAQC,QAASL,KAAKL,SAAtB,sB,GA1BYW,IAAMC,WCSRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,SAASC,IAEP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAMNC,IAASC,OACP,kBAACF,EAAD,MACAG,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.9e18297c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\"\n\nfunction Header(){\n\n    const date = new Date()\n    const hour = date.getHours()\n    const min = date.getMinutes()\n    const sec = date.getSeconds()\n    var dayList = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday \",\"Thursday\",\"Friday\",\"Saturday\"]\n    const day = date.getDay()\n    console.log(min, sec, hour)\n    let pahar\n    let timeOfDay\n    \n    if (hour >= 12 && hour < 17){\n      timeOfDay = \"afternoon\"\n      pahar = \"PM\"\n    }\n    else if (hour >= 15 && hour < 20){\n        timeOfDay = \"evening\"\n        pahar = \"PM\"\n    }\n    else if (hour < 12){\n      timeOfDay = \"morning\"\n      pahar = \"AM\"\n    }\n    else{\n      timeOfDay = \"night\"\n      pahar = \"PM\"\n    }\n    return (\n      <h1> hi good {timeOfDay}, Today is {dayList[day]}, and Current time is : {hour} : {min} : {sec} {pahar} aur kya haal hai </h1>\n      \n)\n\n}\n\nexport default Header","import React from \"react\"\n\nfunction Footer(){\n\n    return(\n\n        <p>hi there i am deepak mukhraj patel <br />\n           i am just practising the react app for my further requirements\n        </p>\n    )\n}\n\n\nexport default Footer","import React from \"react\";\nimport Webcam from \"react-webcam\";\n\nclass ReactWC extends React.Component {\n    setRef = webcam => {\n      this.webcam = webcam;\n    };\n  \n    capture = () => {\n      const imageSrc = this.webcam.getScreenshot();\n    };\n  \n    render() {\n      const videoConstraints = {\n        width: 1280,\n        height: 720,\n        facingMode: \"user\"\n      };\n  \n      return (\n        <div>\n          <Webcam\n            audio={false}\n            height={350}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={350}\n            videoConstraints={videoConstraints}\n          />\n          <button onClick={this.capture}>Capture photo</button>\n        </div>\n      );\n    }\n  }\n  \n\n\n\nexport default ReactWC\n\n\n//const WebcamComponent = () => <Webcam />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport ReactWC from \"./components/ReactWC\"\nimport * as serviceWorker from './serviceWorker';\n\nfunction Include(){\n\n  return (\n    <div>\n      <Header />\n      <ReactWC />\n      <App />\n      <Footer />\n    </div>\n\n  )\n}\n\nReactDOM.render(\n  <Include />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}